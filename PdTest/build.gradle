apply plugin: 'com.android.application'

import org.apache.tools.ant.taskdefs.condition.Os

dependencies {
    implementation project(':PdCore')
    implementation 'androidx.legacy:legacy-support-v4:' + rootProject.androidxLegacySupportVersion
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    ndkVersion rootProject.ndkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'

        // Uncomment the following 'ndk' section to include only 32-bit CPU architectures in the APK
        // ndk {
        //    abiFilters 'x86', 'armeabi-v7a'
        // }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            jniLibs.srcDir 'libs' //set .so files location to libs
            jni.srcDirs = [] //disable automatic ndk-build call
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of the default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    tasks.create(name: 'buildNative', type: Exec, description: 'Compile JNI source via NDK') {
        commandLine ndkBuildExecutablePath,
                'V=1',
                '-C', file('jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    tasks.create(name: 'cleanNative', type: Exec, description: 'Clean JNI object files') {
        commandLine ndkBuildExecutablePath, 'V=1', '-C', file('jni').absolutePath, 'clean'
    }

    clean.configure {
        dependsOn tasks.named('cleanNative')
    }

    tasks.withType(JavaCompile).configureEach {
        dependsOn tasks.named('buildNative')
    }
}

// TODO: Move to convention plugin?
def getNdkBuildExecutablePath() {
    // android.ndkDirectory should return project.android.ndkVersion ndkDirectory
    def ndkDir = android.ndkDirectory.absolutePath
    def ndkBuildName = Os.isFamily(Os.FAMILY_WINDOWS) ? 'ndk-build.cmd' : 'ndk-build'
    def ndkBuildFullPath = new File(ndkDir, ndkBuildName).getAbsolutePath()
    if (!new File(ndkBuildFullPath).canExecute()) {
        throw new GradleScriptException("ndk-build executable not found: $ndkBuildFullPath")
    }
    return ndkBuildFullPath
}
