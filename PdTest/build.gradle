apply plugin: 'com.android.application'

dependencies {
    implementation project(':PdCore')
    implementation "androidx.legacy:legacy-support-v4:" + rootProject.androidxLegacySupportVersion
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        // Uncomment the following 'ndk' section to include only 32-bit CPU architectures in the APK
        // ndk {
        //    abiFilters "x86", "armeabi-v7a"
        // }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            jniLibs.srcDir 'libs' //set .so files location to libs
            jni.srcDirs = [] //disable automatic ndk-build call
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of the default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    tasks.create(name: 'buildNative', type: Exec, description: 'Compile JNI source via NDK') {
        commandLine getNdkBuildExecutablePath(),
                'V=1',
                '-C', file('jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    tasks.create(name: 'cleanNative', type: Exec, description: 'Clean JNI object files') {
        commandLine getNdkBuildExecutablePath(), 'V=1', '-C', file('jni').absolutePath, 'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn 'buildNative'
    }
}

def getNdkBuildName() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'ndk-build.cmd'
    } else {
        return 'ndk-build'
    }
}

// Adapted from ReactAndroid
def findNdkBuildFullPath() {
    if (System.getenv('ANDROID_NDK') != null) {
        def ndkDir = System.getenv('ANDROID_NDK')
        return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
    }
    def ndkDir = android.hasProperty('plugin') ? android.plugin.ndkFolder :
            plugins.getPlugin('com.android.library').hasProperty('sdkHandler') ?
                    plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder() :
                    android.ndkDirectory ? android.ndkDirectory.absolutePath : null
    if (ndkDir) {
        return new File(ndkDir, getNdkBuildName()).getAbsolutePath()
    }
    return null
}

// TODO: Move to convention plugin
def getNdkBuildExecutablePath() {
    def ndkBuildFullPath = findNdkBuildFullPath()
    if (ndkBuildFullPath == null || !new File(ndkBuildFullPath).canExecute()) {
        throw new GradleScriptException("ndk-build executable not found: $ndkBuildFullPath")
    }
    return ndkBuildFullPath
}
